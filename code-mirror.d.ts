/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   code-mirror.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html, css} from 'lit-element';

import {ValidatableMixin} from '@anypoint-web-components/validatable-mixin/validatable-mixin.js';

declare namespace UiElements {

  /**
   * Code mirror web component
   */
  class CodeMirrorElement extends
    ValidatableMixin(
    Object) {

    /**
     * Editor's value.
     * If set at initialization time any content inside this element will be replaced by this
     * value.
     */
    value: String|null;

    /**
     * The mode to use. When not given, this will default to the first mode that was loaded.
     * It may be a string, which either simply names the mode or is a MIME type associated with
     * the mode.
     * Alternatively, it may be an object containing configuration options for the mode, with
     * a name property that names the mode. For example
     * <code>{name: "javascript", json: true}</code>
     */
    mode: String|null;

    /**
     * Explicitly set the line separator for the editor. By default (value null), the document
     * will be split on CRLFs as well as lone CRs and LFs, and a single LF will be used as line
     * separator in all output.
     */
    lineSeparator: String|null;

    /**
     * The width of a tab character.
     * Defaults to 2.
     */
    tabSize: Number|null;

    /**
     * Whether to use the context-sensitive indentation that the mode provides (or just indent
     * the same as the line before).
     */
    smartIndent: Boolean|null;

    /**
     * Configures the key map to use. The default is "default", which is the only key map
     * defined in codemirror.js itself.
     */
    keyMap: String|null;

    /**
     * Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll).
     */
    lineWrapping: Boolean|null;

    /**
     * This disables editing of the editor content by the user. If the special value "nocursor"
     * is given (instead of simply true), focusing of the editor is also disallowed.
     */
    readonly: Boolean|null;

    /**
     * Whether the cursor should be drawn when a selection is active.
     */
    showCursorWhenSelecting: Boolean|null;

    /**
     * When enabled, which is the default, doing copy or cut when there is no selection will
     * copy or cut the whole lines that have cursors on them.
     */
    lineWiseCopyCut: Boolean|null;

    /**
     * The maximum number of undo levels that the editor stores. Note that this includes
     * selection change events. Defaults to 200.
     */
    undoDepth: Boolean|null;

    /**
     * The period of inactivity (in milliseconds) that will cause a new history event to be
     * started when typing or deleting. Defaults to 1250.
     */
    historyEventDelay: Number|null;

    /**
     * Can be used to make CodeMirror focus itself on initialization. Defaults to off.
     */
    autofocus: Boolean|null;

    /**
     * An option for CodeMirror's gutters.
     * For example `['CodeMirror-lint-markers']`
     */
    gutters: any[]|null|undefined;

    /**
     * Lint option. It should be a linter object used to lint the
     * value.
     *
     * This option works when `../codemirror/addon/lint.lint.js` is
     * imcluded into the document.
     */
    lint: object|null|undefined;
    readonly editor: any;

    /**
     * True when a value is required.
     */
    required: boolean|null|undefined;

    /**
     * A reference to the CodeMirror instance.
     */
    _editor: object|null;
    render(): any;
    firstUpdated(): void;
    _initializeEditor(): void;
    _getContentValue(): any;
    _unindent(text: any): any;

    /**
     * Sets options to an editor that has been set before the editor was created
     */
    _setPendingOptions(): void;
    connectedCallback(): void;
    _connectEditor(): void;
    disconnectedCallback(): void;

    /**
     * Refreshes the sate of the editor.
     */
    refresh(): void;

    /**
     * Focus cursor on an editor.
     */
    focus(): void;

    /**
     * Set option on an editor.
     *
     * @param option An option name to setOption
     * @param value A value to be set.
     */
    setOption(option: String|null, value: Any|null): void;

    /**
     * Set an editor value when `value` property changed.
     */
    _valueChanged(value: String|null): void;

    /**
     * Auto-called when mode has changed
     */
    _modeChanged(val: String|null): void;
    _onChangeHandler(): void;
    _onBeforeChangeHnalder(instance: any, changeObj: any): void;
    _getValidity(): any;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "code-mirror": UiElements.CodeMirrorElement;
  }
}

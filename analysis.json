{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "## What is this?\n\nCode-Mirror is a Web Component made with [Polymer](https://www.polymer-project.org/)\nthat wraps a default text-area with CodeMirror's highlight syntax, plugins and options.\n\n### Example:\n\n```html\n...\n<head>\n <link rel=\"import\" href=\"bower_components/code-mirror/code-mirror.html\"/>\n</head>\n<body>\n <code-mirror mode=\"javascript\" on-change=\"valueChanged\">\n   function myScript() {\n     return 100;\n   }\n </code-mirror>\n</body>\n```\n\nThe `<code-mirror>` element must be initialized with the `mode` property.\nOtherwise it will initialize itself without any syntaxt highlighting,\nindent and autofill support.\n\n## Accessing options\n\nThe element exposes `setOption()` function that should be used to set\neditor options.\n\n```javascript\nthis.$.cm.setOption('extraKeys', {\n 'Ctrl-Space': (cm) => {\n   CodeMirror.showHint(cm, CodeMirror.hint['http-headers'], {\n     container: this.shadowRoot\n   });\n }\n});\n```\nAdditionaly the element has the `editor` property which is a refferene to CodeMirror instance.\n\n## Rendering hidden element\n\nCodeMirror has issues with rendering while the element is hidden.\nIf the element is active but not visible (e.g. in `<iron-pages>` element)\nthen you may want to call `refresh()` function on a CodeMirror instance\nafter showing the element.\n\n## Changes in version 2\n\n- Theming is made exclusively by CSS variables. `theme` property has been\nre moved and the component doesn't contain any theme definition.\n- Property change observers will not set option on the editor if not the\nvalue is not set by calling `setAttribute()` or `removeAttribute`.\nThe element uses `attributeChanged()` callback which only works when element\nattribute change. Exception is `lint` property wich require to pass\ncomplex object.\n- Hints can now be appended as a child of this element with `slot=\"hints\"`\nattribute. The element handles styling of hints. Use `code-mirror-hints`\nmodule for hints support and example implementation.\n- lineNumber has been removed since setting this option render the editor\nincorrectly. It is a problem with CM library and not tthe element.\n\n## Styling\n\n`<code-mirror>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--code-mirror` | Mixin applied to the element | `{}`\n`--code-mirror-wrapper` | Mixin applied to the wrapper element (where the CM is rendered) | `{}`\n`--code-mirror-editor` | Mixin applied to the editor element  | `{}`\n\nSee `codemirror-styles.html` file for detailed theme instruction.",
      "summary": "",
      "path": "code-mirror.js",
      "properties": [
        {
          "name": "_pendingOptions",
          "type": "Array",
          "description": "An array of options to set after the editor has been created.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "value",
          "type": "String",
          "description": "Editor's value.\nIf set at initialization time any content inside this element will be replaced by this\nvalue.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "mode",
          "type": "String",
          "description": "The mode to use. When not given, this will default to the first mode that was loaded.\nIt may be a string, which either simply names the mode or is a MIME type associated with\nthe mode.\nAlternatively, it may be an object containing configuration options for the mode, with\na name property that names the mode. For example\n<code>{name: \"javascript\", json: true}</code>",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_modeChanged\"",
              "attributeType": "String"
            }
          },
          "defaultValue": "{\"name\":\"javascript\",\"json\":true}"
        },
        {
          "name": "lineSeparator",
          "type": "String",
          "description": "Explicitly set the line separator for the editor. By default (value null), the document\nwill be split on CRLFs as well as lone CRs and LFs, and a single LF will be used as line\nseparator in all output.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 6
            },
            "end": {
              "line": 244,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_lineSeparatorChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "tabSize",
          "type": "Number",
          "description": "The width of a tab character.\nDefaults to 2.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 6
            },
            "end": {
              "line": 254,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_tabSizeChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "smartIndent",
          "type": "Boolean",
          "description": "Whether to use the context-sensitive indentation that the mode provides (or just indent\nthe same as the line before).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 6
            },
            "end": {
              "line": 264,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_smartIndentChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "keyMap",
          "type": "String",
          "description": "Configures the key map to use. The default is \"default\", which is the only key map\ndefined in codemirror.js itself.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 6
            },
            "end": {
              "line": 274,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_keyMapChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "lineWrapping",
          "type": "Boolean",
          "description": "Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 6
            },
            "end": {
              "line": 283,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_lineWrappingChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "readOnly",
          "type": "Boolean",
          "description": "This disables editing of the editor content by the user. If the special value \"nocursor\"\nis given (instead of simply true), focusing of the editor is also disallowed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 293,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_readOnlyChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "showCursorWhenSelecting",
          "type": "Boolean",
          "description": "Whether the cursor should be drawn when a selection is active.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 302,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_showCursorWhenSelectingChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "lineWiseCopyCut",
          "type": "Boolean",
          "description": "When enabled, which is the default, doing copy or cut when there is no selection will\ncopy or cut the whole lines that have cursors on them.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_lineWiseCopyCutChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "undoDepth",
          "type": "Boolean",
          "description": "The maximum number of undo levels that the editor stores. Note that this includes\nselection change events. Defaults to 200.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 6
            },
            "end": {
              "line": 322,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_undoDepthChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "historyEventDelay",
          "type": "Number",
          "description": "The period of inactivity (in milliseconds) that will cause a new history event to be\nstarted when typing or deleting. Defaults to 1250.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 329,
              "column": 6
            },
            "end": {
              "line": 332,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_historyEventDelayChanged\"",
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "autofocus",
          "type": "Boolean",
          "description": "Can be used to make CodeMirror focus itself on initialization. Defaults to off.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 338,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_autofocusChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "gutters",
          "type": "Array | null | undefined",
          "description": "An option for CodeMirror's gutters.\nFor example `['CodeMirror-lint-markers']`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 6
            },
            "end": {
              "line": 349,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_guttersChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "lint",
          "type": "Object | null | undefined",
          "description": "Lint option. It should be a linter object used to lint the\nvalue.\n\nThis option works when `../codemirror/addon/lint.lint.js` is\nimcluded into the document.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 6
            },
            "end": {
              "line": 360,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_lintChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "editor",
          "type": "Object",
          "description": "A reference to the CodeMirror instance.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 6
            },
            "end": {
              "line": 369,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 2
            },
            "end": {
              "line": 397,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setPendingOptions",
          "description": "Sets options to an editor that has been set before the editor was created",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 401,
              "column": 2
            },
            "end": {
              "line": 414,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 416,
              "column": 2
            },
            "end": {
              "line": 424,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 426,
              "column": 2
            },
            "end": {
              "line": 433,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "refresh",
          "description": "Refreshes the sate of the editor.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 437,
              "column": 2
            },
            "end": {
              "line": 442,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "focus",
          "description": "Focus cursor on an editor.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 446,
              "column": 2
            },
            "end": {
              "line": 451,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "setOption",
          "description": "Set option on an editor.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 458,
              "column": 2
            },
            "end": {
              "line": 470,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option",
              "type": "String",
              "description": "An option name to setOption"
            },
            {
              "name": "value",
              "type": "Any",
              "description": "A value to be set."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_lintChanged",
          "description": "Handler for the `lint` property change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 476,
              "column": 2
            },
            "end": {
              "line": 478,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "Linter to use with the editor."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueChanged",
          "description": "Set an editor value when `value` property changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 483,
              "column": 2
            },
            "end": {
              "line": 497,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_modeChanged",
          "description": "Auto-called when mode has changed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 502,
              "column": 2
            },
            "end": {
              "line": 548,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "val",
              "type": "String"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onChangeHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 550,
              "column": 2
            },
            "end": {
              "line": 552,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onBeforeChangeHnalder",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 554,
              "column": 2
            },
            "end": {
              "line": 567,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            },
            {
              "name": "changeObj"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getValidity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 569,
              "column": 2
            },
            "end": {
              "line": 574,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_smartIndentChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 575,
              "column": 2
            },
            "end": {
              "line": 577,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_readOnlyChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 578,
              "column": 2
            },
            "end": {
              "line": 580,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showCursorWhenSelectingChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 581,
              "column": 2
            },
            "end": {
              "line": 583,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_lineWiseCopyCutChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 584,
              "column": 2
            },
            "end": {
              "line": 586,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_autofocusChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 587,
              "column": 2
            },
            "end": {
              "line": 589,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_guttersChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 590,
              "column": 2
            },
            "end": {
              "line": 592,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_historyEventDelayChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 593,
              "column": 2
            },
            "end": {
              "line": 595,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_undoDepthChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 596,
              "column": 2
            },
            "end": {
              "line": 598,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_lineWrappingChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 599,
              "column": 2
            },
            "end": {
              "line": 601,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_tabSizeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 602,
              "column": 2
            },
            "end": {
              "line": 604,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_lineSeparatorChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 605,
              "column": 2
            },
            "end": {
              "line": 607,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_keyMapChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 608,
              "column": 2
            },
            "end": {
              "line": 610,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 158,
          "column": 0
        },
        "end": {
          "line": 623,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.CodeMirrorElement",
      "attributes": [
        {
          "name": "value",
          "description": "Editor's value.\nIf set at initialization time any content inside this element will be replaced by this\nvalue.",
          "sourceRange": {
            "start": {
              "line": 209,
              "column": 6
            },
            "end": {
              "line": 213,
              "column": 7
            }
          },
          "metadata": {},
          "type": "String"
        },
        {
          "name": "mode",
          "description": "The mode to use. When not given, this will default to the first mode that was loaded.\nIt may be a string, which either simply names the mode or is a MIME type associated with\nthe mode.\nAlternatively, it may be an object containing configuration options for the mode, with\na name property that names the mode. For example\n<code>{name: \"javascript\", json: true}</code>",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 6
            },
            "end": {
              "line": 233,
              "column": 7
            }
          },
          "metadata": {},
          "type": "String"
        },
        {
          "name": "line-separator",
          "description": "Explicitly set the line separator for the editor. By default (value null), the document\nwill be split on CRLFs as well as lone CRs and LFs, and a single LF will be used as line\nseparator in all output.",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 6
            },
            "end": {
              "line": 244,
              "column": 7
            }
          },
          "metadata": {},
          "type": "String"
        },
        {
          "name": "tab-size",
          "description": "The width of a tab character.\nDefaults to 2.",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 6
            },
            "end": {
              "line": 254,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Number"
        },
        {
          "name": "smart-indent",
          "description": "Whether to use the context-sensitive indentation that the mode provides (or just indent\nthe same as the line before).",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 6
            },
            "end": {
              "line": 264,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "key-map",
          "description": "Configures the key map to use. The default is \"default\", which is the only key map\ndefined in codemirror.js itself.",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 6
            },
            "end": {
              "line": 274,
              "column": 7
            }
          },
          "metadata": {},
          "type": "String"
        },
        {
          "name": "line-wrapping",
          "description": "Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll).",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 6
            },
            "end": {
              "line": 283,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "read-only",
          "description": "This disables editing of the editor content by the user. If the special value \"nocursor\"\nis given (instead of simply true), focusing of the editor is also disallowed.",
          "sourceRange": {
            "start": {
              "line": 290,
              "column": 6
            },
            "end": {
              "line": 293,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "show-cursor-when-selecting",
          "description": "Whether the cursor should be drawn when a selection is active.",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 302,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "line-wise-copy-cut",
          "description": "When enabled, which is the default, doing copy or cut when there is no selection will\ncopy or cut the whole lines that have cursors on them.",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "undo-depth",
          "description": "The maximum number of undo levels that the editor stores. Note that this includes\nselection change events. Defaults to 200.",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 6
            },
            "end": {
              "line": 322,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "history-event-delay",
          "description": "The period of inactivity (in milliseconds) that will cause a new history event to be\nstarted when typing or deleting. Defaults to 1250.",
          "sourceRange": {
            "start": {
              "line": 329,
              "column": 6
            },
            "end": {
              "line": 332,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Number"
        },
        {
          "name": "autofocus",
          "description": "Can be used to make CodeMirror focus itself on initialization. Defaults to off.",
          "sourceRange": {
            "start": {
              "line": 338,
              "column": 6
            },
            "end": {
              "line": 341,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Boolean"
        },
        {
          "name": "gutters",
          "description": "An option for CodeMirror's gutters.\nFor example `['CodeMirror-lint-markers']`",
          "sourceRange": {
            "start": {
              "line": 346,
              "column": 6
            },
            "end": {
              "line": 349,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "lint",
          "description": "Lint option. It should be a linter object used to lint the\nvalue.\n\nThis option works when `../codemirror/addon/lint.lint.js` is\nimcluded into the document.",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 6
            },
            "end": {
              "line": 360,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "editor",
          "description": "A reference to the CodeMirror instance.",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 6
            },
            "end": {
              "line": 369,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "before-change",
          "description": "Fired before a change is applied, and its handler may choose to modify or\ncancel the change.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "code-mirror",
      "mixins": [
        "IronValidatableBehavior",
        "IronFormElementBehavior"
      ]
    }
  ]
}

{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "Web component wrapping for [CodeMirror](http://codemirror.net)\n\n## What is this?\n\nCode-Mirror is a Web Component made with [Polymer](https://www.polymer-project.org/)\nthat wraps a default text-area with CodeMirror's highlight syntax, plugins and options.\n\n### Example:\n\n```html\n...\n<head>\n <link rel=\"import\" href=\"bower_components/code-mirror/code-mirror.html\"/>\n</head>\n<body>\n <code-mirror mode=\"javascript\" theme=\"ambiance\" line-numbers on-change=\"valueChanged\">\n   function myScript() {\n     return 100;\n   }\n </code-mirror>\n</body>\n```\n\nThe `<code-mirror>` element must be initialized with the `mode` property.\nOtherwise it will initialize itself without any syntaxt highlighting,\nindent and autofill support.\n\n## Accessing options\n\nThe element exposes `setOption()` function that should be used to set\neditor options.\n\n```javascript\nthis.$.cm.setOption('extraKeys', {\n 'Ctrl-Space': (cm) => {\n   CodeMirror.showHint(cm, CodeMirror.hint['http-headers'], {\n     container: this.shadowRoot\n   });\n }\n});\n```\nAdditionaly the element has the `editor` property which is a refferene to CodeMirror instance.\n\n## Rendering hidden element\n\nCodeMirror has issues with rendering while the element is hidden.\nIf the element is active but not visible (e.g. in `<iron-pages>` element)\nthen you may want to call `refresh()` function on a CodeMirror instance\nafter showing the element.\n\n## Changes in version 2\n\n- Theming is made exclusively by CSS variables. `theme` property has been\nre moved and the component doesn't contain any theme definition.\n- Property change observers will not set option on the editor if not the\nvalue is not set by calling `setAttribute()` or `removeAttribute`.\nThe element uses `attributeChanged()` callback which only works when element\nattribute change. Exception is `lint` property wich require to pass\ncomplex object.\n\n## Styling\n\n`<code-mirror>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--code-mirror` | Mixin applied to the element | `{}`\n`--code-mirror-wrapper` | Mixin applied to the wrapper element (where the CM is rendered) | `{}`\n`--code-mirror-editor` | Mixin applied to the editor element  | `{}`\n\nSee `codemirror-styles.html` file for detailed theme instruction.",
      "summary": "",
      "path": "code-mirror.html",
      "properties": [
        {
          "name": "validator",
          "type": "string",
          "description": "Name of the validator to use.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-validatable-behavior/iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "True if the last call to `validate` is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-validatable-behavior/iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_invalidChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "name",
          "type": "string",
          "description": "The name of this element.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-form-element-behavior/iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "value",
          "type": "string",
          "description": "Editor's value.\nIf set at initialization time any content inside this element will be replaced by this\nvalue.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\""
            }
          }
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-form-element-behavior/iron-form-element-behavior.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "_parentForm",
          "type": "Object",
          "description": "The form that the element is registered to.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-form-element-behavior/iron-form-element-behavior.html",
            "start": {
              "line": 68,
              "column": 6
            },
            "end": {
              "line": 70,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "_pendingOptions",
          "type": "Array",
          "description": "An array of options to set after the editor has been created.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 8
            },
            "end": {
              "line": 194,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "mode",
          "type": "string",
          "description": "The mode to use. When not given, this will default to the first mode that was loaded.\nIt may be a string, which either simply names the mode or is a MIME type associated with\nthe mode.\nAlternatively, it may be an object containing configuration options for the mode, with\na name property that names the mode. For example\n<code>{name: \"javascript\", json: true}</code>",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 8
            },
            "end": {
              "line": 226,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_modeChanged\""
            }
          }
        },
        {
          "name": "lineSeparator",
          "type": "string",
          "description": "Explicitly set the line separator for the editor. By default (value null), the document\nwill be split on CRLFs as well as lone CRs and LFs, and a single LF will be used as line\nseparator in all output.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 8
            },
            "end": {
              "line": 234,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "tabSize",
          "type": "number",
          "description": "The width of a tab character.\nDefaults to 2.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 8
            },
            "end": {
              "line": 241,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "lineNumbers",
          "type": "boolean",
          "description": "Whether to show line numbers to the left of the editor.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 8
            },
            "end": {
              "line": 247,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "smartIndent",
          "type": "boolean",
          "description": "Whether to use the context-sensitive indentation that the mode provides (or just indent\nthe same as the line before).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 8
            },
            "end": {
              "line": 254,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "keyMap",
          "type": "string",
          "description": "Configures the key map to use. The default is \"default\", which is the only key map\ndefined in codemirror.js itself.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 8
            },
            "end": {
              "line": 261,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "lineWrapping",
          "type": "boolean",
          "description": "Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 8
            },
            "end": {
              "line": 267,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "readOnly",
          "type": "boolean",
          "description": "This disables editing of the editor content by the user. If the special value \"nocursor\"\nis given (instead of simply true), focusing of the editor is also disallowed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 8
            },
            "end": {
              "line": 274,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "showCursorWhenSelecting",
          "type": "boolean",
          "description": "Whether the cursor should be drawn when a selection is active.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 8
            },
            "end": {
              "line": 280,
              "column": 40
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "lineWiseCopyCut",
          "type": "boolean",
          "description": "When enabled, which is the default, doing copy or cut when there is no selection will\ncopy or cut the whole lines that have cursors on them.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 8
            },
            "end": {
              "line": 287,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "undoDepth",
          "type": "boolean",
          "description": "The maximum number of undo levels that the editor stores. Note that this includes\nselection change events. Defaults to 200.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 8
            },
            "end": {
              "line": 294,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "historyEventDelay",
          "type": "number",
          "description": "The period of inactivity (in milliseconds) that will cause a new history event to be\nstarted when typing or deleting. Defaults to 1250.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 8
            },
            "end": {
              "line": 301,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "description": "Can be used to make CodeMirror focus itself on initialization. Defaults to off.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 8
            },
            "end": {
              "line": 307,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "gutters",
          "type": "Array",
          "description": "An option for CodeMirror's gutters.\nFor example `['CodeMirror-lint-markers']`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 8
            },
            "end": {
              "line": 312,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "lint",
          "type": "Object",
          "description": "Lint option. It should be a linter object used to lint the\nvalue. Usually it is combined with `lineNumbers`.\n\nThis option works when `../codemirror/addon/lint.lint.js` is\nimcluded into the document.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 8
            },
            "end": {
              "line": 323,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_lintChanged\""
            }
          }
        },
        {
          "name": "editor",
          "type": "Object",
          "description": "A reference to the CodeMirror instance.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 329,
              "column": 8
            },
            "end": {
              "line": 332,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "importLocation",
          "type": "string",
          "description": "Location of codemirror directory where CM's assests are located\nIf not set it will use `../codemirror` as a default location",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 8
            },
            "end": {
              "line": 337,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-validatable-behavior/iron-validatable-behavior.html",
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_invalidChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-validatable-behavior/iron-validatable-behavior.html",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 75,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_validator",
          "description": "Recompute this every time it's needed, because we don't know if the\nunderlying IronValidatableBehaviorMeta has changed.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-validatable-behavior/iron-validatable-behavior.html",
            "start": {
              "line": 79,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "hasValidator",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-validatable-behavior/iron-validatable-behavior.html",
            "start": {
              "line": 87,
              "column": 4
            },
            "end": {
              "line": 89,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if the validator `validator` exists."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "validate",
          "description": "Returns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/iron-validatable-behavior/iron-validatable-behavior.html",
            "start": {
              "line": 102,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "Deprecated: The value to be validated. By default,\nit is passed to the validator's `validate()` function, if a validator is set.\nIf this argument is not specified, then the element's `value` property\nis used, if it exists."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if `value` is valid."
          },
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "_getValidity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 541,
              "column": 4
            },
            "end": {
              "line": 546,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-form-element-behavior/iron-form-element-behavior.html",
            "start": {
              "line": 73,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/iron-form-element-behavior/iron-form-element-behavior.html",
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 85,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "attributeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 4
            },
            "end": {
              "line": 357,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "newValue"
            }
          ]
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 359,
              "column": 4
            },
            "end": {
              "line": 377,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setPendingOptions",
          "description": "Sets options to an editor that has been set before the editor was created",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 381,
              "column": 4
            },
            "end": {
              "line": 394,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 396,
              "column": 4
            },
            "end": {
              "line": 405,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 407,
              "column": 4
            },
            "end": {
              "line": 414,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "focus",
          "description": "Focus cursor on an editor.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 4
            },
            "end": {
              "line": 423,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "setOption",
          "description": "Set option on an editor.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 430,
              "column": 4
            },
            "end": {
              "line": 442,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option",
              "type": "String",
              "description": "An option name to setOption"
            },
            {
              "name": "value",
              "type": "Any",
              "description": "A value to be set."
            }
          ]
        },
        {
          "name": "_lintChanged",
          "description": "Handler for the `lint` property change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "Linter to use with the editor."
            }
          ]
        },
        {
          "name": "_valueChanged",
          "description": "Set an editor value when `value` property changed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 468,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_modeChanged",
          "description": "Auto-called when mode has changed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 470,
              "column": 4
            },
            "end": {
              "line": 520,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "val"
            }
          ]
        },
        {
          "name": "_onChangeHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 522,
              "column": 4
            },
            "end": {
              "line": 524,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onBeforeChangeHnalder",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 526,
              "column": 4
            },
            "end": {
              "line": 539,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            },
            {
              "name": "changeObj"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 179,
          "column": 2
        },
        "end": {
          "line": 567,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.CodeMirrorElement",
      "attributes": [
        {
          "name": "validator",
          "description": "Name of the validator to use.",
          "sourceRange": {
            "file": "bower_components/iron-validatable-behavior/iron-validatable-behavior.html",
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 51,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "invalid",
          "description": "True if the last call to `validate` is invalid.",
          "sourceRange": {
            "file": "bower_components/iron-validatable-behavior/iron-validatable-behavior.html",
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 62,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "name": "name",
          "description": "The name of this element.",
          "sourceRange": {
            "file": "bower_components/iron-form-element-behavior/iron-form-element-behavior.html",
            "start": {
              "line": 40,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "value",
          "description": "Editor's value.\nIf set at initialization time any content inside this element will be replaced by this\nvalue.",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 8
            },
            "end": {
              "line": 206,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "required",
          "description": "Set to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recommended to provide a visual style for the element\nwhen its value is invalid.",
          "sourceRange": {
            "file": "bower_components/iron-form-element-behavior/iron-form-element-behavior.html",
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "name": "mode",
          "description": "The mode to use. When not given, this will default to the first mode that was loaded.\nIt may be a string, which either simply names the mode or is a MIME type associated with\nthe mode.\nAlternatively, it may be an object containing configuration options for the mode, with\na name property that names the mode. For example\n<code>{name: \"javascript\", json: true}</code>",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 8
            },
            "end": {
              "line": 226,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "line-separator",
          "description": "Explicitly set the line separator for the editor. By default (value null), the document\nwill be split on CRLFs as well as lone CRs and LFs, and a single LF will be used as line\nseparator in all output.",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 8
            },
            "end": {
              "line": 234,
              "column": 29
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "tab-size",
          "description": "The width of a tab character.\nDefaults to 2.",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 8
            },
            "end": {
              "line": 241,
              "column": 23
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "line-numbers",
          "description": "Whether to show line numbers to the left of the editor.",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 8
            },
            "end": {
              "line": 247,
              "column": 28
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "smart-indent",
          "description": "Whether to use the context-sensitive indentation that the mode provides (or just indent\nthe same as the line before).",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 8
            },
            "end": {
              "line": 254,
              "column": 28
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "key-map",
          "description": "Configures the key map to use. The default is \"default\", which is the only key map\ndefined in codemirror.js itself.",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 8
            },
            "end": {
              "line": 261,
              "column": 22
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "line-wrapping",
          "description": "Whether CodeMirror should scroll or wrap for long lines. Defaults to false (scroll).",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 8
            },
            "end": {
              "line": 267,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "read-only",
          "description": "This disables editing of the editor content by the user. If the special value \"nocursor\"\nis given (instead of simply true), focusing of the editor is also disallowed.",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 8
            },
            "end": {
              "line": 274,
              "column": 25
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "show-cursor-when-selecting",
          "description": "Whether the cursor should be drawn when a selection is active.",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 8
            },
            "end": {
              "line": 280,
              "column": 40
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "line-wise-copy-cut",
          "description": "When enabled, which is the default, doing copy or cut when there is no selection will\ncopy or cut the whole lines that have cursors on them.",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 8
            },
            "end": {
              "line": 287,
              "column": 32
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "undo-depth",
          "description": "The maximum number of undo levels that the editor stores. Note that this includes\nselection change events. Defaults to 200.",
          "sourceRange": {
            "start": {
              "line": 294,
              "column": 8
            },
            "end": {
              "line": 294,
              "column": 25
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "history-event-delay",
          "description": "The period of inactivity (in milliseconds) that will cause a new history event to be\nstarted when typing or deleting. Defaults to 1250.",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 8
            },
            "end": {
              "line": 301,
              "column": 33
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "autofocus",
          "description": "Can be used to make CodeMirror focus itself on initialization. Defaults to off.",
          "sourceRange": {
            "start": {
              "line": 307,
              "column": 8
            },
            "end": {
              "line": 307,
              "column": 26
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "gutters",
          "description": "An option for CodeMirror's gutters.\nFor example `['CodeMirror-lint-markers']`",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 8
            },
            "end": {
              "line": 312,
              "column": 22
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "lint",
          "description": "Lint option. It should be a linter object used to lint the\nvalue. Usually it is combined with `lineNumbers`.\n\nThis option works when `../codemirror/addon/lint.lint.js` is\nimcluded into the document.",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 8
            },
            "end": {
              "line": 323,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "editor",
          "description": "A reference to the CodeMirror instance.",
          "sourceRange": {
            "start": {
              "line": 329,
              "column": 8
            },
            "end": {
              "line": 332,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "import-location",
          "description": "Location of codemirror directory where CM's assests are located\nIf not set it will use `../codemirror` as a default location",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 8
            },
            "end": {
              "line": 337,
              "column": 30
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {},
          "inheritedFrom": "Polymer.IronValidatableBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-form-element-register",
          "description": "iron-form-element-register",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "iron-form-element-unregister",
          "description": "iron-form-element-unregister",
          "metadata": {},
          "inheritedFrom": "Polymer.IronFormElementBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "before-change",
          "description": "before-change",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "change",
          "description": "change",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "code-mirror.html",
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 19
            }
          }
        }
      ],
      "tagname": "code-mirror",
      "mixins": [
        "Polymer.IronValidatableBehavior",
        "Polymer.IronFormElementBehavior"
      ]
    }
  ]
}
